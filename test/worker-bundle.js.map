{"version":3,"sources":["webpack:///external \"angular\"","webpack:///./app/worker-index.ts","webpack:///./app/services/worker-service/worker-worker-service.ts","webpack:///./app/services/project-service/project-worker-service.ts","webpack:///./app/services/sparql-update-service.ts"],"names":["angular","m","module","config","$provide","service","run","$rootScope","workerWorkerService","$on","rejection","$broadcast","auths","$httpProvider","interceptors","push","request","url","headers","authService","$http","event","authorizations","loginConfirmed","WorkerWorkerService","serializationService","$injector","$q","cancellers","name","args","self","postMessage","e","console","log","message","id","undefined","restorePrototypes","$apply","cancel","canceller","resolve","get","defer","promise","method","apply","concat","then","deferred","success","data","error","Error","stack","stripFunctions","update","StateWorkerService","state","ProjectWorkerService","fibraSparqlService","source","templateId","runSingleQuery","listPrimaryEndpointConfigurationsQuery","runListQuery","listRemoteEndpointConfigurationsQuery","replace","listProjectsQuery","listSchemasQuery","schemas","endpoints","dataModel","classes","cl","namedNode","classMap","set","properties","pr","propertyMap","classConf","bindingConverters","superClasses","binding","goc","value","subClasses","types","labels","nodeFromBinding","descriptions","bindingHandlers","obj","prop","val","add","propertyConf","superProperties","subProperties","inverseProperty","domains","ranges","promises","forEach","ep","schemaEndpoint","classQuery","query","tracker","response","results","bindings","bindingsToObject","propertyQuery","schema","endpoint","all","values","filter","spr","find","opr","empty","rootClasses","each","dc","rc","inverseProperties","rootProperties","loadFull","q","p","map","loadSchema","archiveEndpoints","loadRemoteEndpointConfiguration","ae","aes","authorityEndpoints","loadDataModel","dm","tq","ps","runQuery","a","lq","oc","graph","sparqlEndpoint","projects","conf","bindingTypes","rightsHolders","sourceClassSettings","layouts","dateCreated","Date","copy","rightsHolders_labels","rightsHolders_descriptions","compatibleSchemas","fromJson","orderCitables","citables","sort","b","Number","MAX_VALUE","rh","SparqlUpdateService","workerService","quadsToAdd","quadsToRemove","call","graphsToAdd","graphsToRemove","SparqlUpdateWorkerService","graphsToAddMap","graphsToRemoveMap","triples","triple","subject","predicate","object","updateGraphs","addString","instance","equals","toCanonical","g","join","removeString","queryTemplate","r"],"mappings":";;;;;AAAA,yB;;;;;;;;;;ACAA;;IAAYA,O;;AAEZ;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAVA;AAWA,IAAIC,IAAID,QAAQE,MAAR,CAAe,OAAf,EAAwB,CAAC,gBAAD,EAAmB,uBAAnB,EAA4C,sCAA5C,EAAoF,0CAApF,CAAxB,CAAR;AACAD,EAAEE,MAAF,cAAS,UAACC,QAAD,EAAc;AACnBA,aAASC,OAAT,CAAiB,oBAAjB;AACAD,aAASC,OAAT,CAAiB,sBAAjB;AACAD,aAASC,OAAT,CAAiB,oBAAjB;AACAD,aAASC,OAAT,CAAiB,qBAAjB;AACAD,aAASC,OAAT,CAAiB,yBAAjB;AACAD,aAASC,OAAT,CAAiB,2BAAjB;AACAD,aAASC,OAAT,CAAiB,iCAAjB;AACH,CARD;AASA;AACAJ,EAAEK,GAAF,uCAAM,UAACC,UAAD,EAAaC,mBAAb,EAAqC;AACvCD,eAAWE,GAAX,CAAe,0BAAf,EAA2C,UAACC,SAAD;AAAA,eAAeF,oBAAoBG,UAApB,CAA+B,0BAA/B,EAA2DD,SAA3D,CAAf;AAAA,KAA3C;AACH,CAFD;AAGA,IAAIE,QAAQ,EAAZ;AACAX,EAAEE,MAAF,mBAAS,UAACU,aAAD,EAAmB;AACxBA,kBAAcC,YAAd,CAA2BC,IAA3B,CAAgC,YAAM;AAClC,eAAO;AACHC,qBAAS,iBAACA,QAAD,EAAa;AAClB,oBAAIJ,MAAMI,SAAQC,GAAd,CAAJ,EACID,SAAQE,OAAR,CAAgB,eAAhB,IAAmCN,MAAMI,SAAQC,GAAd,CAAnC;AACJ,uBAAOD,QAAP;AACH;AALE,SAAP;AAOH,KARD;AASH,CAVD;AAWAf,EAAEK,GAAF,wCAAM,UAACC,UAAD,EAAaY,WAAb,EAA0BC,KAA1B,EAAoC;AACtCb,eAAWE,GAAX,CAAe,yBAAf,EAA0C,UAACY,KAAD,EAAQC,cAAR,EAA2B;AACjEV,gBAAQU,cAAR;AACAH,oBAAYI,cAAZ;AACH,KAHD;AAIH,CALD,G;;;;;;;;ACtCA;;;;;;;;;;;;;;;AACA;;IAAYvB,O;;AACZ;;;;;;IACawB,mB,WAAAA,mB;;;AACT;AACA,iCAAYC,oBAAZ,EAAkCC,SAAlC,EAA6CC,EAA7C,EAAiDpB,UAAjD,EAA6D;AAAA;;AACzD,aAAKkB,oBAAL,GAA4BA,oBAA5B;AACA,aAAKC,SAAL,GAAiBA,SAAjB;AACA,aAAKC,EAAL,GAAUA,EAAV;AACA,aAAKpB,UAAL,GAAkBA,UAAlB;AACA,aAAKqB,UAAL,GAAkB,EAAlB;AACH;;;;mCACUC,I,EAAMC,I,EAAM;AACnB,gBAAI;AACAC,qBAAKC,WAAL,CAAiB,EAAEX,OAAO,WAAT,EAAsBQ,MAAMA,IAA5B,EAAkCC,MAAMA,IAAxC,EAAjB;AACH,aAFD,CAGA,OAAOG,CAAP,EAAU;AACNC,wBAAQC,GAAR,CAAYL,IAAZ,EAAkBG,CAAlB;AACA,sBAAMA,CAAN;AACH;AACJ;;;kCACSG,O,EAAS;AAAA;;AACf,gBAAIA,QAAQC,EAAR,KAAeC,SAAnB,EAA8B;AAC1B,qBAAK/B,UAAL,CAAgBI,UAAhB,CAA2ByB,QAAQP,IAAnC,EAAyC,KAAKJ,oBAAL,CAA0Bc,iBAA1B,CAA4CH,QAAQN,IAApD,CAAzC;AACA,qBAAKvB,UAAL,CAAgBiC,MAAhB;AACH,aAHD,MAIK,IAAIJ,QAAQK,MAAZ,EAAoB;AACrB,oBAAIC,YAAY,KAAKd,UAAL,CAAgBQ,QAAQC,EAAxB,CAAhB;AACA,uBAAO,KAAKT,UAAL,CAAgBQ,QAAQC,EAAxB,CAAP;AACA,oBAAIK,SAAJ,EACIA,UAAUC,OAAV;AACP,aALI,MAMA;AACD,oBAAItC,UAAU,KAAKqB,SAAL,CAAekB,GAAf,CAAmBR,QAAQ/B,OAA3B,CAAd;AACA,oBAAIqC,aAAY,KAAKf,EAAL,CAAQkB,KAAR,EAAhB;AACA,qBAAKjB,UAAL,CAAgBQ,QAAQC,EAAxB,IAA8BK,UAA9B;AACA,oBAAII,UAAUzC,QAAQ+B,QAAQW,MAAhB,EAAwBC,KAAxB,CAA8B3C,OAA9B,EAAuC,KAAKoB,oBAAL,CAA0Bc,iBAA1B,CAA4CH,QAAQN,IAApD,EAA0DmB,MAA1D,CAAiEP,WAAUI,OAA3E,CAAvC,CAAd;AACA,oBAAI,CAACA,OAAD,IAAY,CAACA,QAAQI,IAAzB,EAA+B;AAC3B,wBAAIC,WAAW,KAAKxB,EAAL,CAAQkB,KAAR,EAAf;AACAM,6BAASR,OAAT,CAAiBG,OAAjB;AACAA,8BAAUK,SAASL,OAAnB;AACH;AACDA,wBAAQI,IAAR,CAAa,UAACE,OAAD,EAAa;AACtB,2BAAO,MAAKxB,UAAL,CAAgBQ,QAAQC,EAAxB,CAAP;AACAN,yBAAKC,WAAL,CAAiB,EAAEX,OAAO,SAAT,EAAoBgB,IAAID,QAAQC,EAAhC,EAAoCgB,MAAMD,OAA1C,EAAjB;AACH,iBAHD,EAGG,UAACE,KAAD,EAAW;AACV,2BAAO,MAAK1B,UAAL,CAAgBQ,QAAQC,EAAxB,CAAP;AACA,wBAAIiB,iBAAiBC,KAArB,EAA4B;AACxBxB,6BAAKC,WAAL,CAAiB,EAAEX,OAAO,SAAT,EAAoBgB,IAAID,QAAQC,EAAhC,EAAoCgB,MAAM,EAAExB,MAAMyB,MAAMzB,IAAd,EAAoBO,SAASkB,MAAMlB,OAAnC,EAA4CoB,OAAOF,MAAME,KAAzD,EAA1C,EAAjB;AACA,8BAAMF,KAAN;AACH;AACDvB,yBAAKC,WAAL,CAAiB,EAAEX,OAAO,SAAT,EAAoBgB,IAAID,QAAQC,EAAhC,EAAoCgB,MAAM,2CAAqBI,cAArB,CAAoCH,KAApC,CAA1C,EAAjB;AACH,iBAVD,EAUG,UAACI,MAAD;AAAA,2BAAY3B,KAAKC,WAAL,CAAiB,EAAEX,OAAO,QAAT,EAAmBgB,IAAID,QAAQC,EAA/B,EAAmCgB,MAAMK,MAAzC,EAAjB,CAAZ;AAAA,iBAVH;AAWH;AACJ;;;;;IAEQC,kB,WAAAA,kB;;;;;;;iCACAC,K,EAAO;AACZ,iBAAKA,KAAL,GAAaA,KAAb;AACH;;;;;AAEL5D,QAAQE,MAAR,CAAe,+BAAf,EAAgD,CAAC,sCAAD,CAAhD,EACKC,MADL,cACY,UAACC,QAAD,EAAc;AACtBA,aAASC,OAAT,CAAiB,oBAAjB,EAAuCsD,kBAAvC;AACAvD,aAASC,OAAT,CAAiB,qBAAjB,EAAwCmB,mBAAxC;AACH,CAJD,G;;;;;;;;AC7DA;;;;;;;;;;;;;;;AACA;;IAAYxB,O;;AACZ;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IACa6D,oB,WAAAA,oB;;;AACT,kCAAYC,kBAAZ,EAAgCrC,oBAAhC,EAAsDE,EAAtD,EAA0D;AAAA;;AACtD,aAAKmC,kBAAL,GAA0BA,kBAA1B;AACA,aAAKrC,oBAAL,GAA4BA,oBAA5B;AACA,aAAKE,EAAL,GAAUA,EAAV;AACH;;;;yDAKgCoC,M,EAAQC,U,EAAY;AACjD,mBAAO,KAAKC,cAAL,CAAoBF,MAApB,EAA4B,2DAA6BG,sCAAzD,EAAiGF,UAAjG,EAA6G,+DAAiCA,UAAjC,EAA6CD,MAA7C,CAA7G,CAAP;AACH;;;0DACiCA,M,EAAQ;AACtC,mBAAO,KAAKI,YAAL,CAAkBJ,MAAlB,EAA0B,2DAA6BG,sCAAvD,EAA+F,UAAC7B,EAAD;AAAA,uBAAQ,+DAAiCA,EAAjC,EAAqC0B,MAArC,CAAR;AAAA,aAA/F,CAAP;AACH;;;wDAC+BA,M,EAAQC,U,EAAY;AAChD,mBAAO,KAAKC,cAAL,CAAoBF,MAApB,EAA4B,yDAA4BK,qCAAxD,EAA+FJ,UAA/F,EAA2G,6DAAgCA,UAAhC,EAA4CD,MAA5C,CAA3G,CAAP;AACH;;;0DACiCA,M,EAAQ;AACtC,mBAAO,KAAKI,YAAL,CAAkBJ,MAAlB,EAA0B,yDAA4BK,qCAA5B,CAAkEC,OAAlE,CAA0E,cAA1E,EAA0F,0CAA1F,CAA1B,EAAiK,UAAChC,EAAD;AAAA,uBAAQ,6DAAgCA,EAAhC,EAAoC0B,MAApC,CAAR;AAAA,aAAjK,CAAP;AACH;;;4DACmCA,M,EAAQ;AACxC,mBAAO,KAAKI,YAAL,CAAkBJ,MAAlB,EAA0B,yDAA4BK,qCAA5B,CAAkEC,OAAlE,CAA0E,cAA1E,EAA0F,4CAA1F,CAA1B,EAAmK,UAAChC,EAAD;AAAA,uBAAQ,6DAAgCA,EAAhC,EAAoC0B,MAApC,CAAR;AAAA,aAAnK,CAAP;AACH;;;qCACYA,M,EAAQ;AACjB,mBAAO,KAAKI,YAAL,CAAkBJ,MAAlB,EAA0B,iBAAQO,iBAAlC,EAAqD,UAACjC,EAAD;AAAA,uBAAQ,qBAAYA,EAAZ,EAAgB0B,MAAhB,CAAR;AAAA,aAArD,CAAP;AACH;;;oCACWA,M,EAAQ;AAChB,mBAAO,KAAKI,YAAL,CAAkBJ,MAAlB,EAA0B,eAAOQ,gBAAjC,EAAmD,UAAClC,EAAD;AAAA,uBAAQ,mBAAWA,EAAX,EAAe0B,MAAf,CAAR;AAAA,aAAnD,CAAP;AACH;;;mCACUA,M,EAAQ1B,E,EAAI;AACnB,mBAAO,KAAK4B,cAAL,CAAoBF,MAApB,EAA4B,eAAOQ,gBAAnC,EAAqDlC,EAArD,EAAyD,mBAAWA,EAAX,EAAe0B,MAAf,CAAzD,CAAP;AACH;;;sCACaS,O,EAASC,S,EAAW;AAAA;;AAC9B,gBAAIC,YAAY,0BAAhB;AACA,gBAAIC,UAAU,0BAAS,UAACtC,EAAD,EAAQ;AAC3B,oBAAIuC,KAAK,qBAAU,iBAAYC,SAAZ,CAAsBxC,EAAtB,CAAV,CAAT;AACAqC,0BAAUI,QAAV,CAAmBC,GAAnB,CAAuB1C,EAAvB,EAA2BuC,EAA3B;AACA,uBAAOA,EAAP;AACH,aAJa,CAAd;AAKA,gBAAII,aAAa,0BAAS,UAAC3C,EAAD,EAAQ;AAC9B,oBAAI4C,KAAK,wBAAa,iBAAYJ,SAAZ,CAAsBxC,EAAtB,CAAb,CAAT;AACAqC,0BAAUQ,WAAV,CAAsBH,GAAtB,CAA0B1C,EAA1B,EAA8B4C,EAA9B;AACA,uBAAOA,EAAP;AACH,aAJgB,CAAjB;AAKA,gBAAIE,YAAY;AACZC,mCAAmB;AACfC,kCAAc,sBAACC,OAAD;AAAA,+BAAaX,QAAQY,GAAR,CAAYD,QAAQE,KAApB,CAAb;AAAA,qBADC;AAEfC,gCAAY,oBAACH,OAAD;AAAA,+BAAaX,QAAQY,GAAR,CAAYD,QAAQE,KAApB,CAAb;AAAA,qBAFG;AAGfE,2BAAO,eAACJ,OAAD;AAAA,+BAAaX,QAAQY,GAAR,CAAYD,QAAQE,KAApB,CAAb;AAAA,qBAHQ;AAIfG,4BAAQ,gBAACL,OAAD;AAAA,+BAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,qBAJO;AAKfO,kCAAc,sBAACP,OAAD;AAAA,+BAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA;AALC,iBADP;AAQZQ,iCAAiB;AACbJ,2BAAO,eAACK,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBADM;AAEbN,4BAAQ,gBAACI,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBAFK;AAGbJ,kCAAc,sBAACE,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBAHD;AAIbZ,kCAAc,sBAACU,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBAJD;AAKbR,gCAAY,oBAACM,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA;AALC;AARL,aAAhB;AAgBA,gBAAIE,eAAe;AACff,mCAAmB;AACfgB,qCAAiB,yBAACd,OAAD;AAAA,+BAAaN,WAAWO,GAAX,CAAeD,QAAQE,KAAvB,CAAb;AAAA,qBADF;AAEfa,mCAAe,uBAACf,OAAD;AAAA,+BAAaN,WAAWO,GAAX,CAAeD,QAAQE,KAAvB,CAAb;AAAA,qBAFA;AAGfc,qCAAiB,yBAAChB,OAAD;AAAA,+BAAaN,WAAWO,GAAX,CAAeD,QAAQE,KAAvB,CAAb;AAAA,qBAHF;AAIfE,2BAAO,eAACJ,OAAD;AAAA,+BAAaX,QAAQY,GAAR,CAAYD,QAAQE,KAApB,CAAb;AAAA,qBAJQ;AAKfe,6BAAS,iBAACjB,OAAD;AAAA,+BAAaX,QAAQY,GAAR,CAAYD,QAAQE,KAApB,CAAb;AAAA,qBALM;AAMfgB,4BAAQ,gBAAClB,OAAD;AAAA,+BAAaX,QAAQY,GAAR,CAAYD,QAAQE,KAApB,CAAb;AAAA,qBANO;AAOfG,4BAAQ,gBAACL,OAAD;AAAA,+BAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,qBAPO;AAQfO,kCAAc,sBAACP,OAAD;AAAA,+BAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA;AARC,iBADJ;AAWfQ,iCAAiB;AACbM,qCAAiB,yBAACL,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBADJ;AAEbI,mCAAe,uBAACN,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBAFF;AAGbP,2BAAO,eAACK,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBAHM;AAIbM,6BAAS,iBAACR,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBAJI;AAKbO,4BAAQ,gBAACT,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBALK;AAMbN,4BAAQ,gBAACI,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA,qBANK;AAObJ,kCAAc,sBAACE,GAAD,EAAMC,IAAN,EAAYC,GAAZ;AAAA,+BAAoBF,IAAIC,IAAJ,EAAUE,GAAV,CAAcD,GAAd,CAApB;AAAA;AAPD;AAXF,aAAnB;AAqBA,gBAAIQ,WAAW,EAAf;AACAjC,oBAAQkC,OAAR,CAAgB,kBAAU;AACtBjC,0BAAUiC,OAAV,CAAkB,cAAM;AACpB,wBAAIC,GAAGC,cAAH,IAAqBD,GAAGE,UAA5B,EAAwC;AACpCJ,iCAAS1F,IAAT,CAAc,MAAK+C,kBAAL,CAAwBgD,KAAxB,CAA8BH,GAAGC,cAAjC,EAAiDD,GAAGE,UAApD,EAAgE3D,IAAhE,CAAqE,oBAAY;AAC3F,gCAAI6D,UAAU,+CAAd;AACAC,qCAASC,OAAT,CAAiBC,QAAjB,CAA0BR,OAA1B,CAAkC;AAAA,uCAAW,oCAAcS,gBAAd,CAA+B7B,OAA/B,EAAwCX,QAAQY,GAAR,CAAYD,QAAQ,IAAR,EAAcE,KAA1B,CAAxC,EAA0EL,SAA1E,EAAqFG,QAAQ,IAAR,EAAcE,KAAnG,EAA0GuB,OAA1G,CAAX;AAAA,6BAAlC;AACH,yBAHa,CAAd;AAIAN,iCAAS1F,IAAT,CAAc,MAAK+C,kBAAL,CAAwBgD,KAAxB,CAA8BH,GAAGC,cAAjC,EAAiDD,GAAGS,aAApD,EAAmElE,IAAnE,CAAwE,oBAAY;AAC9F,gCAAI6D,UAAU,+CAAd;AACAC,qCAASC,OAAT,CAAiBC,QAAjB,CAA0BR,OAA1B,CAAkC;AAAA,uCAAW,oCAAcS,gBAAd,CAA+B7B,OAA/B,EAAwCN,WAAWO,GAAX,CAAeD,QAAQ,IAAR,EAAcE,KAA7B,CAAxC,EAA6EW,YAA7E,EAA2Fb,QAAQ,IAAR,EAAcE,KAAzG,EAAgHuB,OAAhH,CAAX;AAAA,6BAAlC;AACH,yBAHa,CAAd;AAIH;AACJ,iBAXD;AAYAN,yBAAS1F,IAAT,CAAc,MAAK+C,kBAAL,CAAwBgD,KAAxB,CAA8BO,OAAOC,QAArC,EAA+CD,OAAOR,UAAtD,EAAkE3D,IAAlE,CAAuE,oBAAY;AAC7F,wBAAI6D,UAAU,+CAAd;AACAC,6BAASC,OAAT,CAAiBC,QAAjB,CAA0BR,OAA1B,CAAkC;AAAA,+BAAW,oCAAcS,gBAAd,CAA+B7B,OAA/B,EAAwCX,QAAQY,GAAR,CAAYD,QAAQ,IAAR,EAAcE,KAA1B,CAAxC,EAA0EL,SAA1E,EAAqFG,QAAQ,IAAR,EAAcE,KAAnG,EAA0GuB,OAA1G,CAAX;AAAA,qBAAlC;AACH,iBAHa,CAAd;AAIAN,yBAAS1F,IAAT,CAAc,MAAK+C,kBAAL,CAAwBgD,KAAxB,CAA8BO,OAAOC,QAArC,EAA+CD,OAAOD,aAAtD,EAAqElE,IAArE,CAA0E,oBAAY;AAChG,wBAAI6D,UAAU,+CAAd;AACAC,6BAASC,OAAT,CAAiBC,QAAjB,CAA0BR,OAA1B,CAAkC;AAAA,+BAAW,oCAAcS,gBAAd,CAA+B7B,OAA/B,EAAwCN,WAAWO,GAAX,CAAeD,QAAQ,IAAR,EAAcE,KAA7B,CAAxC,EAA6EW,YAA7E,EAA2Fb,QAAQ,IAAR,EAAcE,KAAzG,EAAgHuB,OAAhH,CAAX;AAAA,qBAAlC;AACH,iBAHa,CAAd;AAIH,aArBD;AAsBA,mBAAO,KAAKpF,EAAL,CAAQ4F,GAAR,CAAYd,QAAZ,EAAsBvD,IAAtB,CAA2B,YAAM;AACpCyB,wBAAQ6C,MAAR,GAAiBd,OAAjB,CAAyB,cAAM;AAC3B9B,uBAAGS,YAAH,CAAgBmC,MAAhB,GAAyBC,MAAzB,CAAgC;AAAA,+BAAO,CAACC,IAAIjC,UAAJ,CAAekC,IAAf,CAAoB;AAAA,mCAAOC,QAAQhD,EAAf;AAAA,yBAApB,CAAR;AAAA,qBAAhC,EAAgF8B,OAAhF,CAAwF;AAAA,+BAAOgB,IAAIjC,UAAJ,CAAeS,GAAf,CAAmBtB,EAAnB,CAAP;AAAA,qBAAxF;AACAA,uBAAGa,UAAH,CAAc+B,MAAd,GAAuBC,MAAvB,CAA8B;AAAA,+BAAO,CAACC,IAAIrC,YAAJ,CAAiBsC,IAAjB,CAAsB;AAAA,mCAAOC,QAAQhD,EAAf;AAAA,yBAAtB,CAAR;AAAA,qBAA9B,EAAgF8B,OAAhF,CAAwF;AAAA,+BAAOgB,IAAIrC,YAAJ,CAAiBa,GAAjB,CAAqBtB,EAArB,CAAP;AAAA,qBAAxF;AACH,iBAHD;AAIAD,wBAAQ6C,MAAR,GAAiBd,OAAjB,CAAyB,cAAM;AAC3B,wBAAI9B,GAAGS,YAAH,CAAgBwC,KAAhB,EAAJ,EACInD,UAAUoD,WAAV,CAAsB/G,IAAtB,CAA2B6D,EAA3B;AACP,iBAHD;AAIAI,2BAAWwC,MAAX,GAAoBd,OAApB,CAA4B,cAAM;AAC9B,wBAAIzB,GAAGqB,eAAP,EACIrB,GAAGqB,eAAH,CAAmBA,eAAnB,GAAqCrB,EAArC;AACJA,uBAAGmB,eAAH,CAAmBoB,MAAnB,GAA4BC,MAA5B,CAAmC;AAAA,+BAAO,CAACC,IAAIrB,aAAJ,CAAkBsB,IAAlB,CAAuB;AAAA,mCAAOC,QAAQ3C,EAAf;AAAA,yBAAvB,CAAR;AAAA,qBAAnC,EAAsFyB,OAAtF,CAA8F;AAAA,+BAAOgB,IAAIrB,aAAJ,CAAkBH,GAAlB,CAAsBjB,EAAtB,CAAP;AAAA,qBAA9F;AACAA,uBAAGoB,aAAH,CAAiBmB,MAAjB,GAA0BC,MAA1B,CAAiC;AAAA,+BAAO,CAACC,IAAItB,eAAJ,CAAoBuB,IAApB,CAAyB;AAAA,mCAAOC,QAAQ3C,EAAf;AAAA,yBAAzB,CAAR;AAAA,qBAAjC,EAAsFyB,OAAtF,CAA8F;AAAA,+BAAOgB,IAAItB,eAAJ,CAAoBF,GAApB,CAAwBjB,EAAxB,CAAP;AAAA,qBAA9F;AACAA,uBAAGsB,OAAH,CAAWwB,IAAX,CAAgB;AAAA,+BAAMC,GAAGhD,UAAH,CAAckB,GAAd,CAAkBjB,EAAlB,CAAN;AAAA,qBAAhB;AACAA,uBAAGuB,MAAH,CAAUuB,IAAV,CAAe;AAAA,+BAAME,GAAGC,iBAAH,CAAqBhC,GAArB,CAAyBjB,EAAzB,CAAN;AAAA,qBAAf;AACH,iBAPD;AAQAD,2BAAWwC,MAAX,GAAoBd,OAApB,CAA4B,cAAM;AAC9B,wBAAIzB,GAAGmB,eAAH,CAAmByB,KAAnB,EAAJ,EACInD,UAAUyD,cAAV,CAAyBpH,IAAzB,CAA8BkE,EAA9B;AACP,iBAHD;AAIA,uBAAOP,SAAP;AACH,aAtBM,CAAP;AAuBH;;;oCACWX,M,EAAQ1B,E,EAAI+F,Q,EAAU;AAAA;;AAC9B,gBAAIC,IAAI,KAAKpE,cAAL,CAAoBF,MAApB,EAA4B,iBAAQO,iBAApC,EAAuDjC,EAAvD,EAA2D,qBAAYA,EAAZ,EAAgB0B,MAAhB,CAA3D,CAAR;AACA,gBAAI,CAACqE,QAAL,EACI,OAAOC,CAAP,CADJ,KAGI,OAAOA,EAAEnF,IAAF,CAAO,aAAK;AACf,oBAAIuD,WAAW,EAAf;AACAA,yBAAS1F,IAAT,CAAc,OAAKY,EAAL,CAAQ4F,GAAR,CAAYe,EAAE9D,OAAF,CAAU+D,GAAV,CAAc;AAAA,2BAAU,OAAKC,UAAL,CAAgBnB,OAAOtD,MAAvB,EAA+BsD,OAAOhF,EAAtC,CAAV;AAAA,iBAAd,CAAZ,EAAgFa,IAAhF,CAAqF;AAAA,2BAAWoF,EAAE9D,OAAF,GAAYA,OAAvB;AAAA,iBAArF,CAAd;AACAiC,yBAAS1F,IAAT,CAAc,OAAKY,EAAL,CAAQ4F,GAAR,CAAYe,EAAEG,gBAAF,CAAmBF,GAAnB,CAAuB;AAAA,2BAAM,OAAKG,+BAAL,CAAqCC,GAAG5E,MAAxC,EAAgD4E,GAAGtG,EAAnD,CAAN;AAAA,iBAAvB,CAAZ,EAAkGa,IAAlG,CAAuG;AAAA,2BAAOoF,EAAEG,gBAAF,GAAqBG,GAA5B;AAAA,iBAAvG,CAAd;AACAnC,yBAAS1F,IAAT,CAAc,OAAKY,EAAL,CAAQ4F,GAAR,CAAYe,EAAEO,kBAAF,CAAqBN,GAArB,CAAyB;AAAA,2BAAM,OAAKG,+BAAL,CAAqCC,GAAG5E,MAAxC,EAAgD4E,GAAGtG,EAAnD,CAAN;AAAA,iBAAzB,CAAZ,EAAoGa,IAApG,CAAyG;AAAA,2BAAOoF,EAAEO,kBAAF,GAAuBD,GAA9B;AAAA,iBAAzG,CAAd;AACA,uBAAO,OAAKjH,EAAL,CAAQ4F,GAAR,CAAYd,QAAZ,EAAsBvD,IAAtB,CAA2B;AAAA,2BAAM,OAAK4F,aAAL,CAAmBR,EAAE9D,OAArB,EAA8B8D,EAAEG,gBAAF,CAAmBxF,MAAnB,CAA0BqF,EAAEO,kBAA5B,CAA9B,EAA+E3F,IAA/E,CAAoF;AAAA,+BAAMoF,EAAE5D,SAAF,GAAcqE,EAApB;AAAA,qBAApF,EAA4G7F,IAA5G,CAAiH;AAAA,+BAAMoF,CAAN;AAAA,qBAAjH,CAAN;AAAA,iBAA3B,CAAP;AACH,aANM,CAAP;AAOP;;;uCACcvE,M,EAAQiF,E,EAAI3G,E,EAAI4G,E,EAAI;AAC/B,mBAAO,KAAKC,QAAL,CAAcnF,MAAd,EAAsBiF,EAAtB,EAA0B3G,EAA1B,EAA8B;AAAA,uBAAM4G,EAAN;AAAA,aAA9B,EAAwC/F,IAAxC,CAA6C;AAAA,uBAAKiG,EAAE,CAAF,CAAL;AAAA,aAA7C,CAAP;AACH;;;qCACYpF,M,EAAQqF,E,EAAIC,E,EAAI;AACzB,mBAAO,KAAKH,QAAL,CAAcnF,MAAd,EAAsBqF,EAAtB,EAA0B,IAA1B,EAAgCC,EAAhC,CAAP;AACH;;;iCACQtF,M,EAAQqF,E,EAAI/G,E,EAAIgH,E,EAAI;AAAA;;AACzBD,iBAAKrF,OAAOuF,KAAP,GAAeF,GAAG/E,OAAH,CAAW,eAAX,EAA4B,YAAYN,OAAOuF,KAAnB,GAA2B,KAAvD,EAA8DjF,OAA9D,CAAsE,aAAtE,EAAqF,GAArF,CAAf,GAA2G+E,GAAG/E,OAAH,CAAW,mBAAX,EAAgC,EAAhC,EAAoCA,OAApC,CAA4C,iBAA5C,EAA+D,EAA/D,CAAhH;AACA,gBAAIhC,EAAJ,EACI+G,KAAKA,GAAG/E,OAAH,CAAW,UAAX,EAAuB,mBAAmBhC,EAAnB,GAAwB,KAA/C,EAAsDgC,OAAtD,CAA8D,OAA9D,EAAuE,MAAMhC,EAAN,GAAW,GAAlF,CAAL;AACJ,mBAAO,KAAKyB,kBAAL,CAAwBgD,KAAxB,CAA8B/C,OAAOwF,cAArC,EAAqDH,EAArD,EAAyDlG,IAAzD,CAA8D,oBAAY;AAC7E,oBAAIsG,WAAW,0BAASH,EAAT,CAAf;AACA,oBAAII,OAAO;AACPC,kCAAc,EAAEC,eAAe,aAAjB,EAAgCC,qBAAqB,QAArD,EAA+DC,SAAS,QAAxE,EAAkFrF,SAAS,aAA3F,EAA0GqE,oBAAoB,aAA9H,EAA6IJ,kBAAkB,aAA/J,EADP;AAEPrD,uCAAmB;AACf0E,qCAAa,qBAACxE,OAAD;AAAA,mCAAa,IAAIyE,IAAJ,CAASzE,QAAQE,KAAjB,CAAb;AAAA,yBADE;AAEfE,+BAAO,eAACJ,OAAD;AAAA,mCAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,yBAFQ;AAGfK,gCAAQ,gBAACL,OAAD;AAAA,mCAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,yBAHO;AAIfO,sCAAc,sBAACP,OAAD;AAAA,mCAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,yBAJC;AAKfd,iCAAS,iBAACc,OAAD;AAAA,mCAAa,mBAAWA,QAAQE,KAAnB,EAA0BxF,QAAQgK,IAAR,CAAajG,MAAb,CAA1B,CAAb;AAAA,yBALM;AAMf8E,4CAAoB,4BAACvD,OAAD;AAAA,mCAAa,6DAAgCA,QAAQE,KAAxC,EAA+CxF,QAAQgK,IAAR,CAAajG,MAAb,CAA/C,CAAb;AAAA,yBANL;AAOf0E,0CAAkB,0BAACnD,OAAD;AAAA,mCAAa,6DAAgCA,QAAQE,KAAxC,EAA+CxF,QAAQgK,IAAR,CAAajG,MAAb,CAA/C,CAAb;AAAA,yBAPH;AAQfkG,8CAAsB,8BAAC3E,OAAD;AAAA,mCAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,yBARP;AASf4E,oDAA4B,oCAAC5E,OAAD;AAAA,mCAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,yBATb;AAUfqE,uCAAe,uBAACrE,OAAD;AAAA,mCAAa,qBAAYA,QAAQE,KAApB,EAA2BxF,QAAQgK,IAAR,CAAajG,MAAb,CAA3B,CAAb;AAAA,yBAVA;AAWfoG,2CAAmB,2BAAC7E,OAAD;AAAA,mCAAa,iBAAYM,eAAZ,CAA4BN,OAA5B,CAAb;AAAA,yBAXJ;AAYfsE,6CAAqB,6BAACtE,OAAD;AAAA,mCAAa,OAAK7D,oBAAL,CAA0B2I,QAA1B,CAAmC9E,QAAQE,KAA3C,CAAb;AAAA,yBAZN;AAafqE,iCAAS,iBAACvE,OAAD;AAAA,mCAAa,OAAK7D,oBAAL,CAA0B2I,QAA1B,CAAmC9E,QAAQE,KAA3C,CAAb;AAAA;AAbM,qBAFZ;AAiBPM,qCAAiB;AACbJ,+BAAO,eAACK,GAAD,EAAMC,IAAN,EAAYR,KAAZ;AAAA,mCAAsBO,IAAIC,IAAJ,EAAUE,GAAV,CAAcV,KAAd,CAAtB;AAAA,yBADM;AAEbG,gCAAQ,gBAACI,GAAD,EAAMC,IAAN,EAAYR,KAAZ;AAAA,mCAAsBO,IAAIC,IAAJ,EAAUE,GAAV,CAAcV,KAAd,CAAtB;AAAA,yBAFK;AAGbK,sCAAc,sBAACE,GAAD,EAAMC,IAAN,EAAYR,KAAZ;AAAA,mCAAsBO,IAAIC,IAAJ,EAAUE,GAAV,CAAcV,KAAd,CAAtB;AAAA;AAHD;AAjBV,iBAAX;AAuBA,oBAAIuB,UAAU,+CAAd;AACAC,yBAASC,OAAT,CAAiBC,QAAjB,CAA0BR,OAA1B,CAAkC;AAAA,2BAAW,oCAAcS,gBAAd,CAA+B7B,OAA/B,EAAwCkE,SAASjE,GAAT,CAAaD,QAAQ,IAAR,EAAcE,KAA3B,CAAxC,EAA2EiE,IAA3E,EAAiFnE,QAAQ,IAAR,EAAcE,KAA/F,EAAsGuB,OAAtG,CAAX;AAAA,iBAAlC;AACAyC,yBAAShC,MAAT,GAAkBd,OAAlB,CAA0B;AAAA,2BAAK7C,qBAAqBwG,aAArB,CAAmC/B,EAAEqB,aAArC,CAAL;AAAA,iBAA1B;AACA,uBAAOH,SAAShC,MAAT,EAAP;AACH,aA7BM,CAAP;AA8BH;;;sCAjLoB8C,Q,EAAU;AAC3BA,qBAASC,IAAT,CAAc,UAACpB,CAAD,EAAIqB,CAAJ;AAAA,uBAAU,CAACrB,EAAE,OAAF,IAAaA,EAAE,OAAF,CAAb,GAA0BsB,OAAOC,SAAlC,KAAgDF,EAAE,OAAF,IAAaA,EAAE,OAAF,CAAb,GAA0BC,OAAOC,SAAjF,CAAV;AAAA,aAAd;AACAJ,qBAAS5D,OAAT,CAAiB;AAAA,uBAAM,OAAOiE,GAAG,OAAH,CAAb;AAAA,aAAjB;AACH;;;;;AAgLL3K,QAAQE,MAAR,CAAe,gCAAf,EAAiD,CAC7C,qCAD6C,CAAjD,EAGKC,MAHL,cAGY,UAACC,QAAD,EAAc;AACtBA,aAASC,OAAT,CAAiB,sBAAjB,EAAyCwD,oBAAzC;AACH,CALD,G;;;;;;;;ACpMA;;;;;;;;;;;;;;;AACA;;;;IACa+G,mB,WAAAA,mB;;;AACT;AACA,iCAAYC,aAAZ,EAA2B;AAAA;;AACvB,aAAKA,aAAL,GAAqBA,aAArB;AACH;;;;oCACWvD,Q,EAAUwD,U,EAAYC,a,EAAe;AAC7C,mBAAO,KAAKF,aAAL,CAAmBG,IAAnB,CAAwB,2BAAxB,EAAqD,aAArD,EAAoE,CAAC1D,QAAD,EAAWwD,UAAX,EAAuBC,aAAvB,CAApE,CAAP;AACH;;;qCACYzD,Q,EAAU2D,W,EAAaC,c,EAAgB;AAChD,mBAAO,KAAKL,aAAL,CAAmBG,IAAnB,CAAwB,2BAAxB,EAAqD,cAArD,EAAqE,CAAC1D,QAAD,EAAW2D,WAAX,EAAwBC,cAAxB,CAArE,CAAP;AACH;;;;;IAEQC,yB,WAAAA,yB;;;AACT;AACA,uCAAYrH,kBAAZ,EAAgC;AAAA;;AAC5B,aAAKA,kBAAL,GAA0BA,kBAA1B;AACH;;;;oCACWwD,Q,EAA+C;AAAA,gBAArCwD,UAAqC,uEAAxB,EAAwB;AAAA,gBAApBC,aAAoB,uEAAJ,EAAI;;AACvD,gBAAIK,iBAAiB,EAArB;AACA,gBAAIC,oBAAoB,EAAxB;AACA,gBAAIJ,cAAc,EAAlB;AACA,gBAAIC,iBAAiB,EAArB;AACAJ,uBAAWpE,OAAX,CAAmB,aAAK;AACpB,oBAAI4C,QAAQ8B,eAAe/C,EAAEiB,KAAF,CAAQ9D,KAAvB,CAAZ;AACA,oBAAI,CAAC8D,KAAL,EAAY;AACRA,4BAAQ,eAAUjB,EAAEiB,KAAZ,CAAR;AACA8B,mCAAe/C,EAAEiB,KAAF,CAAQ9D,KAAvB,IAAgC8D,KAAhC;AACA2B,gCAAYlK,IAAZ,CAAiBuI,KAAjB;AACH;AACDA,sBAAMgC,OAAN,CAAcvK,IAAd,CAAmB,iBAAYwK,MAAZ,CAAmBlD,EAAEmD,OAArB,EAA8BnD,EAAEoD,SAAhC,EAA2CpD,EAAEqD,MAA7C,CAAnB;AACH,aARD;AASAX,0BAAcrE,OAAd,CAAsB,aAAK;AACvB,oBAAI4C,QAAQ+B,kBAAkBhD,EAAEiB,KAAF,CAAQ9D,KAA1B,CAAZ;AACA,oBAAI,CAAC8D,KAAL,EAAY;AACRA,4BAAQ,eAAUjB,EAAEiB,KAAZ,CAAR;AACA+B,sCAAkBhD,EAAEiB,KAAF,CAAQ9D,KAA1B,IAAmC8D,KAAnC;AACA4B,mCAAenK,IAAf,CAAoBuI,KAApB;AACH;AACDA,sBAAMgC,OAAN,CAAcvK,IAAd,CAAmB,iBAAYwK,MAAZ,CAAmBlD,EAAEmD,OAArB,EAA8BnD,EAAEoD,SAAhC,EAA2CpD,EAAEqD,MAA7C,CAAnB;AACH,aARD;AASA,mBAAO,KAAKC,YAAL,CAAkBrE,QAAlB,EAA4B2D,WAA5B,EAAyCC,cAAzC,CAAP;AACH;;;qCACY5D,Q,EAAiD;AAAA,gBAAvC2D,WAAuC,uEAAzB,EAAyB;AAAA,gBAArBC,cAAqB,uEAAJ,EAAI;;AAC1D,gBAAIU,YAAYX,YAAY1C,GAAZ,CAAgB;AAAA,uBAAS,CAAC,kBAAasD,QAAb,CAAsBC,MAAtB,CAA6BxC,MAAMA,KAAnC,IAA4C,EAA5C,GAAiD,UAAUA,MAAMA,KAAN,CAAYyC,WAAZ,EAA5D,IAAyF,GAAzF,GAA+FzC,MAAMgC,OAAN,CAAc/C,GAAd,CAAkB;AAAA,2BAAKyD,EAAED,WAAF,EAAL;AAAA,iBAAlB,EAAwCE,IAAxC,CAA6C,KAA7C,CAA/F,GAAqJ,GAA9J;AAAA,aAAhB,EAAmLA,IAAnL,CAAwL,EAAxL,CAAhB;AACA,gBAAIC,eAAehB,eAAe3C,GAAf,CAAmB;AAAA,uBAAS,CAAC,kBAAasD,QAAb,CAAsBC,MAAtB,CAA6BxC,MAAMA,KAAnC,IAA4C,EAA5C,GAAiD,UAAUA,MAAMA,KAAN,CAAYyC,WAAZ,EAA5D,IAAyF,GAAzF,GAA+FzC,MAAMgC,OAAN,CAAc/C,GAAd,CAAkB;AAAA,2BAAKyD,EAAED,WAAF,EAAL;AAAA,iBAAlB,EAAwCE,IAAxC,CAA6C,KAA7C,CAA/F,GAAqJ,GAA9J;AAAA,aAAnB,EAAsLA,IAAtL,CAA2L,EAA3L,CAAnB;AACA,mBAAO,KAAKnI,kBAAL,CAAwBJ,MAAxB,CAA+B4D,QAA/B,EAAyC6D,0BAA0BgB,aAA1B,CAAwC9H,OAAxC,CAAgD,WAAhD,EAA6D6H,YAA7D,EAA2E7H,OAA3E,CAAmF,WAAnF,EAAgGuH,SAAhG,CAAzC,EAAqJ1I,IAArJ,CAA0J,UAACkJ,CAAD;AAAA,uBAAO,IAAP;AAAA,aAA1J,EAAuK,UAACA,CAAD;AAAA,uBAAO,KAAP;AAAA,aAAvK,CAAP;AACH;;;;;AAELjB,0BAA0BgB,aAA1B,8C","file":"worker-bundle.js","sourcesContent":["module.exports = angular;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 0\n// module chunks = 0 1","import * as angular from 'angular';\n// Register modules\nimport { WorkerWorkerService, StateWorkerService } from 'services/worker-service/worker-worker-service';\nimport { ProjectWorkerService } from 'services/project-service/project-worker-service';\nimport { FibraSparqlService } from 'services/fibra-sparql-service';\nimport { SparqlItemWorkerService } from 'services/sparql-item-service';\nimport { SparqlUpdateWorkerService } from 'services/sparql-update-service';\nimport { SparqlAutocompleteWorkerService } from 'services/sparql-autocomplete-service';\nimport 'services/sparql-statistics-service';\nimport 'services/worker-service/serialization-service';\nimport 'angular-http-auth';\nimport 'rdfstore';\nlet m = angular.module('fibra', ['fi.seco.sparql', 'http-auth-interceptor', 'fibra.services.serialization-service', 'fibra.services.sparql-statistics-service']);\nm.config(($provide) => {\n    $provide.service('fibraSparqlService', FibraSparqlService);\n    $provide.service('projectWorkerService', ProjectWorkerService);\n    $provide.service('stateWorkerService', StateWorkerService);\n    $provide.service('workerWorkerService', WorkerWorkerService);\n    $provide.service('sparqlItemWorkerService', SparqlItemWorkerService);\n    $provide.service('sparqlUpdateWorkerService', SparqlUpdateWorkerService);\n    $provide.service('sparqlAutocompleteWorkerService', SparqlAutocompleteWorkerService);\n});\n// if we get a loginRequired event, broadcast it to the UI thread\nm.run(($rootScope, workerWorkerService) => {\n    $rootScope.$on('event:auth-loginRequired', (rejection) => workerWorkerService.$broadcast('event:auth-loginRequired', rejection));\n});\nlet auths = {};\nm.config(($httpProvider) => {\n    $httpProvider.interceptors.push(() => {\n        return {\n            request: (request) => {\n                if (auths[request.url])\n                    request.headers['Authorization'] = auths[request.url];\n                return request;\n            }\n        };\n    });\n});\nm.run(($rootScope, authService, $http) => {\n    $rootScope.$on('main:auth-loginAuthInfo', (event, authorizations) => {\n        auths = authorizations;\n        authService.loginConfirmed();\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./app/worker-index.ts","'use strict';\nimport * as angular from 'angular';\nimport { SerializationService } from 'services/worker-service/serialization-service';\nexport class WorkerWorkerService {\n    /* @ngInject */\n    constructor(serializationService, $injector, $q, $rootScope) {\n        this.serializationService = serializationService;\n        this.$injector = $injector;\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.cancellers = [];\n    }\n    $broadcast(name, args) {\n        try {\n            self.postMessage({ event: 'broadcast', name: name, args: args });\n        }\n        catch (e) {\n            console.log(args, e);\n            throw e;\n        }\n    }\n    onMessage(message) {\n        if (message.id === undefined) {\n            this.$rootScope.$broadcast(message.name, this.serializationService.restorePrototypes(message.args));\n            this.$rootScope.$apply();\n        }\n        else if (message.cancel) {\n            let canceller = this.cancellers[message.id];\n            delete this.cancellers[message.id];\n            if (canceller)\n                canceller.resolve();\n        }\n        else {\n            let service = this.$injector.get(message.service);\n            let canceller = this.$q.defer();\n            this.cancellers[message.id] = canceller;\n            let promise = service[message.method].apply(service, this.serializationService.restorePrototypes(message.args).concat(canceller.promise));\n            if (!promise || !promise.then) {\n                let deferred = this.$q.defer();\n                deferred.resolve(promise);\n                promise = deferred.promise;\n            }\n            promise.then((success) => {\n                delete this.cancellers[message.id];\n                self.postMessage({ event: 'success', id: message.id, data: success });\n            }, (error) => {\n                delete this.cancellers[message.id];\n                if (error instanceof Error) {\n                    self.postMessage({ event: 'failure', id: message.id, data: { name: error.name, message: error.message, stack: error.stack } });\n                    throw error;\n                }\n                self.postMessage({ event: 'failure', id: message.id, data: SerializationService.stripFunctions(error) });\n            }, (update) => self.postMessage({ event: 'update', id: message.id, data: update }));\n        }\n    }\n}\nexport class StateWorkerService {\n    setState(state) {\n        this.state = state;\n    }\n}\nangular.module('fibra.services.worker-service', ['fibra.services.serialization-service'])\n    .config(($provide) => {\n    $provide.service('stateWorkerService', StateWorkerService);\n    $provide.service('workerWorkerService', WorkerWorkerService);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./app/services/worker-service/worker-worker-service.ts","'use strict';\nimport * as angular from 'angular';\nimport { Citable } from '../../models/citable';\nimport { Project } from './project';\nimport { SparqlService, UniqueObjectTracker } from 'angular-sparql-service';\nimport { PrimaryEndpointConfiguration } from './primary-endpoint-configuration';\nimport { RemoteEndpointConfiguration } from './remote-endpoint-configuration';\nimport { Schema } from './schema';\nimport { EMap } from '../../components/collection-utils';\nimport { DataFactory } from '../../models/rdf';\nimport { DataModel, Class, Property } from './data-model';\nexport class ProjectWorkerService {\n    constructor(fibraSparqlService, serializationService, $q) {\n        this.fibraSparqlService = fibraSparqlService;\n        this.serializationService = serializationService;\n        this.$q = $q;\n    }\n    static orderCitables(citables) {\n        citables.sort((a, b) => (a['order'] ? a['order'] : Number.MAX_VALUE) - (b['order'] ? b['order'] : Number.MAX_VALUE));\n        citables.forEach(rh => delete rh['order']);\n    }\n    loadPrimaryEndpointConfiguration(source, templateId) {\n        return this.runSingleQuery(source, PrimaryEndpointConfiguration.listPrimaryEndpointConfigurationsQuery, templateId, new PrimaryEndpointConfiguration(templateId, source));\n    }\n    listPrimaryEndpointConfigurations(source) {\n        return this.runListQuery(source, PrimaryEndpointConfiguration.listPrimaryEndpointConfigurationsQuery, (id) => new PrimaryEndpointConfiguration(id, source));\n    }\n    loadRemoteEndpointConfiguration(source, templateId) {\n        return this.runSingleQuery(source, RemoteEndpointConfiguration.listRemoteEndpointConfigurationsQuery, templateId, new RemoteEndpointConfiguration(templateId, source));\n    }\n    listArchiveEndpointConfigurations(source) {\n        return this.runListQuery(source, RemoteEndpointConfiguration.listRemoteEndpointConfigurationsQuery.replace(/# TYPELIMIT/g, '?id a fibra:ArchiveEndpointConfiguration'), (id) => new RemoteEndpointConfiguration(id, source));\n    }\n    listAuthorityEndpointConfigurations(source) {\n        return this.runListQuery(source, RemoteEndpointConfiguration.listRemoteEndpointConfigurationsQuery.replace(/# TYPELIMIT/g, '?id a fibra:AuthorityEndpointConfiguration'), (id) => new RemoteEndpointConfiguration(id, source));\n    }\n    listProjects(source) {\n        return this.runListQuery(source, Project.listProjectsQuery, (id) => new Project(id, source));\n    }\n    listSchemas(source) {\n        return this.runListQuery(source, Schema.listSchemasQuery, (id) => new Schema(id, source));\n    }\n    loadSchema(source, id) {\n        return this.runSingleQuery(source, Schema.listSchemasQuery, id, new Schema(id, source));\n    }\n    loadDataModel(schemas, endpoints) {\n        let dataModel = new DataModel();\n        let classes = new EMap((id) => {\n            let cl = new Class(DataFactory.namedNode(id));\n            dataModel.classMap.set(id, cl);\n            return cl;\n        });\n        let properties = new EMap((id) => {\n            let pr = new Property(DataFactory.namedNode(id));\n            dataModel.propertyMap.set(id, pr);\n            return pr;\n        });\n        let classConf = {\n            bindingConverters: {\n                superClasses: (binding) => classes.goc(binding.value),\n                subClasses: (binding) => classes.goc(binding.value),\n                types: (binding) => classes.goc(binding.value),\n                labels: (binding) => DataFactory.nodeFromBinding(binding),\n                descriptions: (binding) => DataFactory.nodeFromBinding(binding),\n            },\n            bindingHandlers: {\n                types: (obj, prop, val) => obj[prop].add(val),\n                labels: (obj, prop, val) => obj[prop].add(val),\n                descriptions: (obj, prop, val) => obj[prop].add(val),\n                superClasses: (obj, prop, val) => obj[prop].add(val),\n                subClasses: (obj, prop, val) => obj[prop].add(val)\n            }\n        };\n        let propertyConf = {\n            bindingConverters: {\n                superProperties: (binding) => properties.goc(binding.value),\n                subProperties: (binding) => properties.goc(binding.value),\n                inverseProperty: (binding) => properties.goc(binding.value),\n                types: (binding) => classes.goc(binding.value),\n                domains: (binding) => classes.goc(binding.value),\n                ranges: (binding) => classes.goc(binding.value),\n                labels: (binding) => DataFactory.nodeFromBinding(binding),\n                descriptions: (binding) => DataFactory.nodeFromBinding(binding)\n            },\n            bindingHandlers: {\n                superProperties: (obj, prop, val) => obj[prop].add(val),\n                subProperties: (obj, prop, val) => obj[prop].add(val),\n                types: (obj, prop, val) => obj[prop].add(val),\n                domains: (obj, prop, val) => obj[prop].add(val),\n                ranges: (obj, prop, val) => obj[prop].add(val),\n                labels: (obj, prop, val) => obj[prop].add(val),\n                descriptions: (obj, prop, val) => obj[prop].add(val)\n            }\n        };\n        let promises = [];\n        schemas.forEach(schema => {\n            endpoints.forEach(ep => {\n                if (ep.schemaEndpoint && ep.classQuery) {\n                    promises.push(this.fibraSparqlService.query(ep.schemaEndpoint, ep.classQuery).then(response => {\n                        let tracker = new UniqueObjectTracker();\n                        response.results.bindings.forEach(binding => SparqlService.bindingsToObject(binding, classes.goc(binding['id'].value), classConf, binding['id'].value, tracker));\n                    }));\n                    promises.push(this.fibraSparqlService.query(ep.schemaEndpoint, ep.propertyQuery).then(response => {\n                        let tracker = new UniqueObjectTracker();\n                        response.results.bindings.forEach(binding => SparqlService.bindingsToObject(binding, properties.goc(binding['id'].value), propertyConf, binding['id'].value, tracker));\n                    }));\n                }\n            });\n            promises.push(this.fibraSparqlService.query(schema.endpoint, schema.classQuery).then(response => {\n                let tracker = new UniqueObjectTracker();\n                response.results.bindings.forEach(binding => SparqlService.bindingsToObject(binding, classes.goc(binding['id'].value), classConf, binding['id'].value, tracker));\n            }));\n            promises.push(this.fibraSparqlService.query(schema.endpoint, schema.propertyQuery).then(response => {\n                let tracker = new UniqueObjectTracker();\n                response.results.bindings.forEach(binding => SparqlService.bindingsToObject(binding, properties.goc(binding['id'].value), propertyConf, binding['id'].value, tracker));\n            }));\n        });\n        return this.$q.all(promises).then(() => {\n            classes.values().forEach(cl => {\n                cl.superClasses.values().filter(spr => !spr.subClasses.find(opr => opr === cl)).forEach(spr => spr.subClasses.add(cl));\n                cl.subClasses.values().filter(spr => !spr.superClasses.find(opr => opr === cl)).forEach(spr => spr.superClasses.add(cl));\n            });\n            classes.values().forEach(cl => {\n                if (cl.superClasses.empty())\n                    dataModel.rootClasses.push(cl);\n            });\n            properties.values().forEach(pr => {\n                if (pr.inverseProperty)\n                    pr.inverseProperty.inverseProperty = pr;\n                pr.superProperties.values().filter(spr => !spr.subProperties.find(opr => opr === pr)).forEach(spr => spr.subProperties.add(pr));\n                pr.subProperties.values().filter(spr => !spr.superProperties.find(opr => opr === pr)).forEach(spr => spr.superProperties.add(pr));\n                pr.domains.each(dc => dc.properties.add(pr));\n                pr.ranges.each(rc => rc.inverseProperties.add(pr));\n            });\n            properties.values().forEach(pr => {\n                if (pr.superProperties.empty())\n                    dataModel.rootProperties.push(pr);\n            });\n            return dataModel;\n        });\n    }\n    loadProject(source, id, loadFull) {\n        let q = this.runSingleQuery(source, Project.listProjectsQuery, id, new Project(id, source));\n        if (!loadFull)\n            return q;\n        else\n            return q.then(p => {\n                let promises = [];\n                promises.push(this.$q.all(p.schemas.map(schema => this.loadSchema(schema.source, schema.id))).then(schemas => p.schemas = schemas));\n                promises.push(this.$q.all(p.archiveEndpoints.map(ae => this.loadRemoteEndpointConfiguration(ae.source, ae.id))).then(aes => p.archiveEndpoints = aes));\n                promises.push(this.$q.all(p.authorityEndpoints.map(ae => this.loadRemoteEndpointConfiguration(ae.source, ae.id))).then(aes => p.authorityEndpoints = aes));\n                return this.$q.all(promises).then(() => this.loadDataModel(p.schemas, p.archiveEndpoints.concat(p.authorityEndpoints)).then(dm => p.dataModel = dm).then(() => p));\n            });\n    }\n    runSingleQuery(source, tq, id, ps) {\n        return this.runQuery(source, tq, id, () => ps).then(a => a[0]);\n    }\n    runListQuery(source, lq, oc) {\n        return this.runQuery(source, lq, null, oc);\n    }\n    runQuery(source, lq, id, oc) {\n        lq = source.graph ? lq.replace(/# STARTGRAPH/g, 'GRAPH <' + source.graph + '> {').replace(/# ENDGRAPH/g, '}') : lq.replace(/.*# STARTGRAPH\\n/g, '').replace(/.*# ENDGRAPH\\n/g, '');\n        if (id)\n            lq = lq.replace(/# VALUE/g, 'VALUES ?id { <' + id + '> }').replace(/<ID>/g, '<' + id + '>');\n        return this.fibraSparqlService.query(source.sparqlEndpoint, lq).then(response => {\n            let projects = new EMap(oc);\n            let conf = {\n                bindingTypes: { rightsHolders: 'uniqueArray', sourceClassSettings: 'single', layouts: 'single', schemas: 'uniqueArray', authorityEndpoints: 'uniqueArray', archiveEndpoints: 'uniqueArray' },\n                bindingConverters: {\n                    dateCreated: (binding) => new Date(binding.value),\n                    types: (binding) => DataFactory.nodeFromBinding(binding),\n                    labels: (binding) => DataFactory.nodeFromBinding(binding),\n                    descriptions: (binding) => DataFactory.nodeFromBinding(binding),\n                    schemas: (binding) => new Schema(binding.value, angular.copy(source)),\n                    authorityEndpoints: (binding) => new RemoteEndpointConfiguration(binding.value, angular.copy(source)),\n                    archiveEndpoints: (binding) => new RemoteEndpointConfiguration(binding.value, angular.copy(source)),\n                    rightsHolders_labels: (binding) => DataFactory.nodeFromBinding(binding),\n                    rightsHolders_descriptions: (binding) => DataFactory.nodeFromBinding(binding),\n                    rightsHolders: (binding) => new Citable(binding.value, angular.copy(source)),\n                    compatibleSchemas: (binding) => DataFactory.nodeFromBinding(binding),\n                    sourceClassSettings: (binding) => this.serializationService.fromJson(binding.value),\n                    layouts: (binding) => this.serializationService.fromJson(binding.value)\n                },\n                bindingHandlers: {\n                    types: (obj, prop, value) => obj[prop].add(value),\n                    labels: (obj, prop, value) => obj[prop].add(value),\n                    descriptions: (obj, prop, value) => obj[prop].add(value)\n                }\n            };\n            let tracker = new UniqueObjectTracker();\n            response.results.bindings.forEach(binding => SparqlService.bindingsToObject(binding, projects.goc(binding['id'].value), conf, binding['id'].value, tracker));\n            projects.values().forEach(p => ProjectWorkerService.orderCitables(p.rightsHolders));\n            return projects.values();\n        });\n    }\n}\nangular.module('fibra.services.project-service', [\n    'fibra.services.fibra-sparql-service'\n])\n    .config(($provide) => {\n    $provide.service('projectWorkerService', ProjectWorkerService);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./app/services/project-service/project-worker-service.ts","'use strict';\nimport { Graph, DataFactory, DefaultGraph } from '../models/rdf';\nexport class SparqlUpdateService {\n    /* @ngInject */\n    constructor(workerService) {\n        this.workerService = workerService;\n    }\n    updateQuads(endpoint, quadsToAdd, quadsToRemove) {\n        return this.workerService.call('sparqlUpdateWorkerService', 'updateQuads', [endpoint, quadsToAdd, quadsToRemove]);\n    }\n    updateGraphs(endpoint, graphsToAdd, graphsToRemove) {\n        return this.workerService.call('sparqlUpdateWorkerService', 'updateGraphs', [endpoint, graphsToAdd, graphsToRemove]);\n    }\n}\nexport class SparqlUpdateWorkerService {\n    /* @ngInject */\n    constructor(fibraSparqlService) {\n        this.fibraSparqlService = fibraSparqlService;\n    }\n    updateQuads(endpoint, quadsToAdd = [], quadsToRemove = []) {\n        let graphsToAddMap = {};\n        let graphsToRemoveMap = {};\n        let graphsToAdd = [];\n        let graphsToRemove = [];\n        quadsToAdd.forEach(q => {\n            let graph = graphsToAddMap[q.graph.value];\n            if (!graph) {\n                graph = new Graph(q.graph);\n                graphsToAddMap[q.graph.value] = graph;\n                graphsToAdd.push(graph);\n            }\n            graph.triples.push(DataFactory.triple(q.subject, q.predicate, q.object));\n        });\n        quadsToRemove.forEach(q => {\n            let graph = graphsToRemoveMap[q.graph.value];\n            if (!graph) {\n                graph = new Graph(q.graph);\n                graphsToRemoveMap[q.graph.value] = graph;\n                graphsToRemove.push(graph);\n            }\n            graph.triples.push(DataFactory.triple(q.subject, q.predicate, q.object));\n        });\n        return this.updateGraphs(endpoint, graphsToAdd, graphsToRemove);\n    }\n    updateGraphs(endpoint, graphsToAdd = [], graphsToRemove = []) {\n        let addString = graphsToAdd.map(graph => (DefaultGraph.instance.equals(graph.graph) ? '' : 'GRAPH' + graph.graph.toCanonical()) + '{' + graph.triples.map(g => g.toCanonical()).join(' . ') + '}').join('');\n        let removeString = graphsToRemove.map(graph => (DefaultGraph.instance.equals(graph.graph) ? '' : 'GRAPH' + graph.graph.toCanonical()) + '{' + graph.triples.map(g => g.toCanonical()).join(' . ') + '}').join('');\n        return this.fibraSparqlService.update(endpoint, SparqlUpdateWorkerService.queryTemplate.replace(/<DELETE>/g, removeString).replace(/<INSERT>/g, addString)).then((r) => true, (r) => false);\n    }\n}\nSparqlUpdateWorkerService.queryTemplate = `DELETE{<DELETE>}INSERT{<INSERT>}WHERE {}`;\n\n\n\n// WEBPACK FOOTER //\n// ./app/services/sparql-update-service.ts"],"sourceRoot":""}